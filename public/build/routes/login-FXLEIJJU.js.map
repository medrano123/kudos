{
  "version": 3,
  "sources": ["empty-module:~/utils/validators.server", "../../../app/routes/login.tsx", "../../../app/components/layout.tsx", "../../../app/components/FormField.tsx"],
  "sourcesContent": ["module.exports = {};", "import React, { useState, useEffect, useRef } from \"react\";\nimport type { V2_MetaFunction } from \"@remix-run/react\";\nimport type { ActionFunction, LoaderFunction} from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node'\nimport { useActionData } from '@remix-run/react'\n\nimport { login, register, getUser } from '~/utils/auth.server'\nimport { Layout } from \"~/components/layout\";\nimport { styles } from \"~/styles/styles.js\";\nimport { FormField } from \"~/components/FormField\";\nimport { validateEmail, validateName, validatePassword } from '~/utils/validators.server'\n\nexport const loader: LoaderFunction = async ({ request }) => {\n    // If there's already a user in the session, redirect to the home page\n    return (await getUser(request)) ? redirect('/') : null\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n    const form = await request.formData()\n    const action = form.get('_action')\n    const email = form.get('email')\n    const password = form.get('password')\n    let firstName = form.get('firstName')\n    let lastName = form.get('lastName')\n\n\n    if (typeof action !== 'string' || typeof email !== 'string' || typeof password !== 'string') {\n        return json({ error: `Invalid Form Data1`, form: action }, { status: 400 })\n      }\n    \n      if (action === 'register' && (typeof firstName !== 'string' || typeof lastName !== 'string')) {\n        return json({ error: `Invalid Form Data2`, form: action }, { status: 400 })\n      }\n    \n\n    const errors = {\n        email: validateEmail(email),\n        password: validatePassword(password),\n        ...(action === 'register'\n            ? {\n                firstName: validateName((firstName as string) || ''),\n                lastName: validateName((lastName as string) || ''),\n            }  : {}),\n    }\n\n    if (Object.values(errors).some(Boolean)){\n        return json({ errors, fields: { email, password, firstName, lastName }, form: action }, { status: 400 })\n    }\n\n      // validation ...\n\n    switch (action) {\n        case 'login': {\n            return await login({ email, password })\n        }\n        case 'register': {\n            firstName = firstName as string\n            lastName = lastName as string\n            return await register({ email, password, firstName, lastName })\n        }\n        default:\n            alert({errors});\n            return json({ error: `Invalid Form Data` }, { status: 400 });\n    }\n}\n\n\n\nexport default function Login() {\n    const actionData = useActionData()\n    const [formError, setFormError] = useState(actionData?.error || '')\n    const [errors, setErrors] = useState(actionData?.errors || {})\n    const firstLoad = useRef(true)\n    const [action, setAction] = useState(\"login\");\n    const [formData, setFormData] = useState({\n        email: actionData?.fields?.email || '',\n        password: actionData?.fields?.password || '',\n        firstName: actionData?.fields?.lastName || '',\n        lastName: actionData?.fields?.firstName || '',\n    })\n     \n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, field: string) => {\n        setFormData( form => ({\n            ...form,\n            [field] : event.target.value\n        }))\n    };\n\n    useEffect(() => {\n        if (!firstLoad.current) {\n            const newState = {\n                email: '',\n                password: '',\n                firstName: '',\n                lastName: '',\n                }\n            setErrors(newState)\n            setFormError('')\n            setFormData(newState)\n        }\n    }, [action])\n    \n    useEffect(() => {\n        if (!firstLoad.current) {\n            setFormError('')\n        }\n    }, [formData])\n    \n    useEffect(() => { \n        firstLoad.current = false \n    }, [])\n    \n\n  \treturn (\n        <Layout>\n\t\t\t<div className='h-full flex justify-center items-center flex-col gap-4'>\n\n                <h2 className=\"text-5xl font-black text-[#915eff]\">\n                    Welcome to Kudos!\n                </h2>\n                <p className=\"font-black text-2xl text-secondary\">\n                    {/* Login to gives some praise! */}\n                    {\n                        action ? \"Login to give some praise!\" : \"Sign up to get started\"\n                    }\n                </p>\n                <button\n                    onClick={() => setAction(action == 'login' ? 'register' : 'login')}\n                    className=\" text-secondary text-sm font-extrabold \">\n\n                    {action === 'login' ? 'Sign Up' : 'Already have an account? Sign In'}\n                </button>\n                <form method=\"post\" className=\"rounded-2xl p-6 w-96 flex flex-col gap-4 mb-8 bg-black-100\">\n                    <div className=\"text-xs font-semibold text-center tracking-wide text-red-500 w-full\">\n                        {formError}\n                    </div>\n\n                    <div className=\"flex flex-col \">\n\n                        <FormField\n                            htmlFor=\"email\"\n                            label=\"Email\"\n                            value={formData.email}\n                            onChange={(e) => handleInputChange(e, 'email')}\n                            placeholder=\"Enter your email address\"\n                            error={errors?.email}\n\n                        />\n                        <FormField\n                            htmlFor=\"password\"\n                            type=\"password\"\n                            label=\"Password\"\n                            value={formData.password}\n                            onChange={(e) => handleInputChange(e, 'password')}\n                            placeholder=\"Enter your password\"\n                            error={errors?.password}\n                        />\n                        {action !== 'login' ? (\n                        <> \n                            {/* or maybe switchto not login */}\n                                <FormField\n                                    htmlFor=\"firstName\"\n                                    label=\"First Name\"\n                                    value={formData.firstName}\n                                    onChange={(e) => handleInputChange(e, 'firstName')}\n                                    placeholder=\"Enter your first name\" \n                                    error={errors?.firstName}\n                                />\n                                <FormField\n                                    htmlFor=\"lastName\"\n                                    label=\"Last Name\"\n                                    value={formData.lastName}\n                                    onChange={(e) => handleInputChange(e, 'lastName')}\n                                    placeholder=\"Enter your last name\"\n                                    error={errors?.lastName}\n\n                                />\n                            </>) : null }\n                        {/* <label htmlFor=\"email\" className=\"\">\n                            <h3 className='mb-4 text-[#915eff] font-black text-2xl'>Email</h3>\n                        </label>\n                        <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"Enter Email\" className=\"w-full p-2 rounded-xl my-2 bg-tertiary\" style={{ color: 'white' }} />\n\n                        <label htmlFor=\"password\" className=\"\">\n                            <h3 className='mb-4 mt-2 text-[#915eff] font-black text-2xl '>Password</h3>\n                        </label>\n                        <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter Password\" className=\"w-full p-2 rounded-xl my-2 bg-tertiary\" style={{ color: 'white' }}/> */}\n\n                        <div className=\"w-full text-center\">\n                            {/* <input\n                                type=\"submit\"\n                                className=\"rounded-xl mt-2 bg-tertiary px-3 py-2 text-[#915eff] font-black transition duration-300 ease-in-out hover:bg-[#fdsf3] hover:-translate-y-1\"\n                                value={isUser === 'login' ? \"Sign In\" : \"Sign Up\" }\n                            /> */}\n                            <button \n                                type=\"submit\"\n                                name=\"_action\"\n                                value={action} \n                                className=\"rounded-xl mt-2 bg-tertiary px-3 py-2 text-[#915eff] font-black transition duration-300 ease-in-out hover:bg-[#fdsf3] hover:-translate-y-1\">\n                                {\n                                    action === 'login' ? \"Sign In\" : \"Sign Up\"\n                                }\n                         </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </Layout>  \t\n    );\n}\n", "import React from 'react';\n\nexport function Layout({ children } : { children : React.ReactNode }) {\n    return (\n        <div className='bg-hero-pattern bg-cover bg-cover-no-repeat bg-center h-screen w-full'>\n            {children}\n        </div>\n    );\n}\n", "import { useEffect, useState } from \"react\"\n\n\n// app/components/form-field.tsx\ninterface FormFieldProps {\n    htmlFor: string\n    label: string\n    type?: string\n    value: any\n    onChange?: (...args: any) => any\n\tplaceholder: string\n\terror?: string\n}\n  \n  export function FormField({ htmlFor, label, type = 'text', value, onChange = () => {}, placeholder, error }: FormFieldProps) {\n\tconst [errorText, setErrorText] = useState(error)\n\n    useEffect(() => {\n        setErrorText(error)\n    }, [error])\n\n    return (\n      \t<>\n        \t<label htmlFor={htmlFor} className=\"font-black text-[#915eff] text-2xl\">\n          \t\t{label}\n        \t</label>\n       \t\t<input\n\t\t\t\tonChange={e => {\n\t\t\t\t\tonChange(e)\n\t\t\t\t\tsetErrorText('')\n\t\t\t\t}}\n\t\t\t\ttype={type}\n\t\t\t\tid={htmlFor}\n\t\t\t\tname={htmlFor}\n\t\t\t\tclassName=\"w-full p-2 rounded-xl my-2 bg-tertiary\"\n\t\t\t\tstyle={{ color: 'white' }}\n\t\t\t\tvalue={value}\n\t\t\t\tplaceholder={placeholder}\n        \t/>\n\t\t\t<div className=\"text-xs font-black text-center tracking-wide text-red-500 w-full\">\n            \t{errorText || ''}\n       \t \t</div>\n      \t</>\n    )\n  }"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime"]
}
